"""Unit tests for the cyber_crew.tools.vulnerability module."""

from collections.abc import Generator
from unittest.mock import MagicMock, patch

import pytest
from crewai.tools import BaseTool
from pydantic import BaseModel

from cyber_crew.tools.vulnerability import (
    FindSuids,
    FindSuidsInput,
    SearchExploit,
    SearchExploitInput,
)


@pytest.fixture
def mock_run_command() -> Generator[MagicMock, None, None]:
    """Mock the run_command utility function."""
    with patch("cyber_crew.tools.vulnerability.run_command") as mock:
        yield mock


class TestFindSuidsInput:
    """Unit tests for the FindSuidsInput model."""

    def test_init(self) -> None:
        """Test creating FindSuidsInput with no parameters."""
        input_data = FindSuidsInput()

        assert isinstance(input_data, BaseModel)


class TestFindSuids:
    """Unit tests for the FindSuids tool."""

    def test_init(self) -> None:
        """Test that the FindSuids tool initializes with correct attributes."""
        tool = FindSuids()

        assert isinstance(tool, BaseTool)
        assert tool.name == "Find SUIDs"
        assert "Tool to find SUID files." in tool.description
        assert tool.args_schema == FindSuidsInput

    def test_run(self, mock_run_command: MagicMock) -> None:
        """Test finding SUID files."""
        output = "/path/to/suid_file"
        mock_run_command.return_value = output
        tool = FindSuids()

        result = tool._run()

        expected_cmd = "find / -perm -4000 -type f 2>/dev/null"
        mock_run_command.assert_called_once_with(expected_cmd)
        assert result == output


class TestSearchExploitInput:
    """Unit tests for the SearchExploitInput model."""

    def test_init(self) -> None:
        """Test creating SearchExploitInput with a valid query."""
        query = "search exploit query"
        input_data = SearchExploitInput(query=query)

        assert isinstance(input_data, BaseModel)
        assert input_data.query == query


class TestSearchExploit:
    """Unit tests for the SearchExploit tool."""

    def test_init(self) -> None:
        """Test that the SearchExploit tool initializes with correct attributes."""
        tool = SearchExploit()

        assert isinstance(tool, BaseTool)
        assert tool.name == "Search Exploit"
        assert "Tool to run a search exploit." in tool.description
        assert tool.args_schema == SearchExploitInput

    def test_run(self, mock_run_command: MagicMock) -> None:
        """Test searching for exploits."""
        query = "search exploit query"
        output = "Command output"
        mock_run_command.return_value = output
        tool = SearchExploit()

        result = tool._run(query)

        expected_cmd = f"searchsploit {query}"
        mock_run_command.assert_called_once_with(expected_cmd)
        assert result == output
